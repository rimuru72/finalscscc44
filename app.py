# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mani.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import numpy as np
import pickle
from PyQt5 import QtCore, QtWidgets

#initializing arrays for input and/or output
init_course = ['BS Nursing', 'BSBA Business Economics', 'BS Accountancy',
'BS Management Accounting', 'AB Philosophy', 'BSBA Marketing Management',
'AB Psychology', 'AB International Studies', 'BS Agriculture', 'BS Biology',
'BS Agricultural and Biosystems Engineering', 'BS DevCom', 'BSED English',
'BS Computer Science', 'BS Information Systems',
'BSBA Financial Management', 'BEED SPED', 'BS EMC', 'BS Psychology',
'BS Chemistry', 'BS Industrial Engineering', 'AB Literature',
'BS Civil Engineering', 'Bachelor of Special Need Education Generalist',
'AB English', 'BS Agribusiness', 'BS Sociology', 'BS Chemical Engineering',
'BSED Social Studies', 'BS Electrical Engineering',
'BS Information Technology', 'BS Mechanical Engineering',
'Bachelor of Early Childhood Education', 'AB Economics',
'BS Food Technology', 'BS Electronics Engineering', 'BS Marine Biology']

colleges = [["XUNURSING", "College of Nursing"], ["XUSBM", "School of Business and Management"] , ["XUCAS", "College of Arts and Sciences"], ["XUAGGIES", "College of Agriculture"], ["XUSOE", "School of Education"], ["XUCCS", "College of Computer Studies"], ["XUENGG", "College of Engineering"]]

#loading models
coumodel = pickle.load(open('course2course.pkl', 'rb'))
colmodel = pickle.load(open('college2college.pkl', 'rb'))
resmodel = pickle.load(open('reason2course.pkl', 'rb'))
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(686, 416)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Title = QtWidgets.QLabel(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(70, 0, 551, 71))
        self.Title.setObjectName("Title")
        self.yearabt = QtWidgets.QLabel(self.centralwidget)
        self.yearabt.setGeometry(QtCore.QRect(260, 340, 171, 21))
        self.yearabt.setObjectName("yearabt")
        self.aboutinfo = QtWidgets.QLabel(self.centralwidget)
        self.aboutinfo.setGeometry(QtCore.QRect(170, 100, 361, 121))
        self.aboutinfo.setWordWrap(True)
        self.aboutinfo.setObjectName("aboutinfo")
        self.copyright_2 = QtWidgets.QLabel(self.centralwidget)
        self.copyright_2.setGeometry(QtCore.QRect(160, 320, 351, 21))
        self.copyright_2.setObjectName("copyright_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 686, 22))
        self.menubar.setObjectName("menubar")
        self.menuMain_Menu = QtWidgets.QMenu(self.menubar)
        self.menuMain_Menu.setObjectName("menuMain_Menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionCollege_to_College = QtWidgets.QAction(MainWindow)
        self.actionCollege_to_College.setObjectName("actionCollege_to_College")
        self.actionCourse_to_Course = QtWidgets.QAction(MainWindow)
        self.actionCourse_to_Course.setObjectName("actionCourse_to_Course")
        self.actionReason_to_Course = QtWidgets.QAction(MainWindow)
        self.actionReason_to_Course.setObjectName("actionReason_to_Course")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menuMain_Menu.addAction(self.actionCollege_to_College)
        self.menuMain_Menu.addAction(self.actionCourse_to_Course)
        self.menuMain_Menu.addAction(self.actionReason_to_Course)
        self.menuMain_Menu.addAction(self.actionAbout)
        self.menubar.addAction(self.menuMain_Menu.menuAction())
       
        #for College-to-College and Course-to-Course and/or Reason-to-Course
        self.predictbtn = QtWidgets.QPushButton(self.centralwidget)
        self.predictbtn.setGeometry(QtCore.QRect(300, 150, 83, 25))
        self.predictbtn.setObjectName("predictbtn")
        self.copyright = QtWidgets.QLabel(self.centralwidget)
        self.copyright.setGeometry(QtCore.QRect(520, 350, 171, 21))
        self.copyright.setObjectName("copyright")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 350, 221, 20))
        self.label.setObjectName("label")
        self.predictout = QtWidgets.QTextEdit(self.centralwidget)
        self.predictout.setGeometry(QtCore.QRect(210, 210, 261, 31))
        self.predictout.setReadOnly(True)
        self.predictout.setObjectName("predictout")


        #for College-to-College
        self.OldCollege = QtWidgets.QComboBox(self.centralwidget)
        self.OldCollege.setGeometry(QtCore.QRect(210, 110, 261, 25))
        self.OldCollege.setObjectName("OldCollege")
        for i in colleges:
            self.OldCollege.addItem("")
        self.CollegeTitle = QtWidgets.QLabel(self.centralwidget)
        self.CollegeTitle.setGeometry(QtCore.QRect(190, 0, 311, 71))
        self.CollegeTitle.setObjectName("CollegeTitle")

        #for Course-to-Course
        self.OldCourse = QtWidgets.QComboBox(self.centralwidget)
        self.OldCourse.setGeometry(QtCore.QRect(210, 110, 261, 25))
        self.OldCourse.setObjectName("OldCourse")
        for i in init_course:
            self.OldCourse.addItem("")
        self.CourseTitle = QtWidgets.QLabel(self.centralwidget)
        self.CourseTitle.setGeometry(QtCore.QRect(140, 0, 551, 71))
        self.CourseTitle.setObjectName("CourseTitle")

        #for Reason-to-Course
        self.ReasonTitle = QtWidgets.QLabel(self.centralwidget)
        self.ReasonTitle.setGeometry(QtCore.QRect(70, 0, 551, 71))
        self.ReasonTitle.setObjectName("Title")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(210, 110, 261, 31))
        self.textEdit.setObjectName("textEdit")
        
       
        #Action when a main menu component is triggered
        self.actionCollege_to_College.triggered.connect(lambda: self.college2collegetrue())
        self.actionCourse_to_Course.triggered.connect(lambda: self.course2coursetrue())
        self.actionReason_to_Course.triggered.connect(lambda: self.reason2coursetrue())
        self.actionAbout.triggered.connect(lambda: self.abouttrue())


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Predictors using Pipelining"))
        self.Title.setText(_translate("MainWindow", "<html><head/><body><h1 align=\"center\" style=\" margin-top:18px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:xx-large; font-weight:600;\">Predictors using Pipelining</span></h1></body></html>"))
        self.yearabt.setText(_translate("MainWindow", "2023 Project for XU-AAO"))
        self.aboutinfo.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Logical Regression Data Models with Count Vectorizer using Pipelining. These models attempt to predict the new course or college a student goes to. A said student is not necessarily identified as a shiftee since the data indicates that they changed course pre or early in an academic year.</p><p align=\"center\"><br/><br/></p></body></html>"))
        self.copyright_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Baguio | Cordova | Mendez | Olaivar | Roa</p></body></html>"))
        self.menuMain_Menu.setTitle(_translate("MainWindow", "Main Menu"))
        self.actionCollege_to_College.setText(_translate("MainWindow", "College-to-College"))
        self.actionCourse_to_Course.setText(_translate("MainWindow", "Course-to-Course"))
        self.actionReason_to_Course.setText(_translate("MainWindow", "Reason-to-Course"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
       
        #for College-to-College and Course-to-Course
        self.predictbtn.setText(_translate("MainWindow", "Predict"))
        self.copyright.setText(_translate("MainWindow", "2023 Project for XU-AAO"))
        #declaring invisible as default
        self.predictbtn.setVisible(False)
        self.predictout.setVisible(False)
        self.copyright.setVisible(False)
        self.label.setVisible(False)

        #for College-to-College
        iter = 0 
        for i in colleges:
            self.OldCollege.setItemText(iter, _translate("MainWindow", i[1]))
            iter+=1
        self.CollegeTitle.setText(_translate("MainWindow", "<h1>Predict New College</h1>"))
        #declaring invisible as default
        self.OldCollege.setVisible(False)
        self.CollegeTitle.setVisible(False)

        #for Course-to-Course
        iter = 0 
        for i in init_course:
            self.OldCourse.setItemText(iter, _translate("MainWindow", i))
            iter+=1
        self.CourseTitle.setText(_translate("MainWindow", "<h1>Predict Course using Course</h1>"))
        #declaring invisible as default
        self.OldCourse.setVisible(False)
        self.CourseTitle.setVisible(False)

        #for Reason-to-Course
        self.ReasonTitle.setText(_translate("MainWindow", "<html><head/><body><h1 align=\"center\" style=\" margin-top:18px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:xx-large; font-weight:600;\">Predict New Course using Reason</span></h1></body></html>"))
        #declaring invisible as default
        self.ReasonTitle.setVisible(False)
        self.textEdit.setVisible(False)


    def college2collegetrue(self):
        self.label.setText("Model Accuracy Estimate: 62.59%")
        self.predictout.setText('')
        #about contents
        self.Title.setVisible(False)
        self.yearabt.setVisible(False)
        self.aboutinfo.setVisible(False)
        self.copyright_2.setVisible(False)

        #course2course contents
        self.OldCourse.setVisible(False)
        self.CourseTitle.setVisible(False)

        #reason2course contents
        self.ReasonTitle.setVisible(False)
        self.textEdit.setVisible(False)

        #college2college contents
        self.predictbtn.setVisible(True)
        self.OldCollege.setVisible(True)
        self.CollegeTitle.setVisible(True)
        self.predictout.setVisible(True)
        self.copyright.setVisible(True)
        self.label.setVisible(True)
        try: self.predictbtn.clicked.disconnect()
        except Exception: pass
        self.predictbtn.clicked.connect(lambda: self.collegepredictfn(self.OldCollege.currentIndex(), colmodel))
    
    def course2coursetrue(self):
        self.label.setText("Model Accuracy Estimate: 32.65%")
        self.predictout.setText('')
        #about contents
        self.Title.setVisible(False)
        self.yearabt.setVisible(False)
        self.aboutinfo.setVisible(False)
        self.copyright_2.setVisible(False)

        #reason2course contents
        self.ReasonTitle.setVisible(False)
        self.textEdit.setVisible(False)
        
        #college2college contents
        self.OldCollege.setVisible(False)
        self.CollegeTitle.setVisible(False)

        #course2course contents
        self.predictbtn.setVisible(True)
        self.OldCourse.setVisible(True)
        self.CourseTitle.setVisible(True)
        self.predictout.setVisible(True)
        self.copyright.setVisible(True)
        self.label.setVisible(True)

        try: self.predictbtn.clicked.disconnect()
        except Exception: pass
        self.predictbtn.clicked.connect(lambda: self.coursepredictfn(self.OldCourse.currentIndex(), coumodel))
    
    def reason2coursetrue(self):
        self.label.setText("Model Accuracy Estimate: 21.77%")
        self.predictout.setText('')
        #about contents
        self.Title.setVisible(False)
        self.yearabt.setVisible(False)
        self.aboutinfo.setVisible(False)
        self.copyright_2.setVisible(False)

        #reason2course contents
        self.OldCourse.setVisible(False)
        self.CourseTitle.setVisible(False)
        
        #college2college contents
        self.OldCollege.setVisible(False)
        self.CollegeTitle.setVisible(False)

        #course2course contents
        self.predictbtn.setVisible(True)
        self.ReasonTitle.setVisible(True)
        self.textEdit.setVisible(True)
        self.predictout.setVisible(True)
        self.copyright.setVisible(True)
        self.label.setVisible(True)

        try: self.predictbtn.clicked.disconnect()
        except Exception: pass
        self.predictbtn.clicked.connect(lambda: self.reasonpredictfn(self.textEdit.toPlainText(), resmodel))
    
    def abouttrue(self):
        try: self.predictbtn.clicked.disconnect()
        except Exception: pass
        #college2college or all except about contents
        self.predictbtn.setVisible(False)
        self.OldCollege.setVisible(False)
        self.CollegeTitle.setVisible(False)
        self.predictout.setVisible(False)
        self.copyright.setVisible(False)
        self.label.setVisible(False)
        
        #reason2course contents
        self.ReasonTitle.setVisible(False)
        self.textEdit.setVisible(False)
        
        #course2course contents
        self.OldCourse.setVisible(False)
        self.CourseTitle.setVisible(False)

        #about contents
        self.Title.setVisible(True)
        self.yearabt.setVisible(True)
        self.aboutinfo.setVisible(True)
        self.copyright_2.setVisible(True)


    def collegepredictfn(self, index, model):
        input = [colleges[index][0]]
        final_input = np.array(input)
        prediction = model.predict(final_input)

        self.predictout.setText('')
        for i in colleges:
            if prediction[0] == i[0]:
                QtCore.QTimer.singleShot(300, lambda:
                self.predictout.setHtml("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        "p, li { white-space: pre-wrap; }\n"
        "</style></head><body style=\" font-family:\'Fira Sans Semi-Light\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
        "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">%s</p></body></html>" % i[1]))
                break
    
    def coursepredictfn(self, index, model):
        input = [init_course[index]]
        final_input = np.array(input)
        prediction = model.predict(final_input)

        self.predictout.setText('')
        QtCore.QTimer.singleShot(300, lambda:
        self.predictout.setHtml("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Fira Sans Semi-Light\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">%s</p></body></html>" % prediction[0]))
    
    def reasonpredictfn(self, str_in, model):
        input = [str_in]
        prediction = model.predict(input)

        self.predictout.setText('')
        QtCore.QTimer.singleShot(300, lambda:
        self.predictout.setHtml("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Fira Sans Semi-Light\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">%s</p></body></html>" % prediction[0]))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
